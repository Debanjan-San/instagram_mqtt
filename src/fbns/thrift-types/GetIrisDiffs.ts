/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IGetIrisDiffs {
    syncToken?: string;
    lastSeqId?: thrift.Int64;
    maxDeltasAbleToProcess?: number;
    deltaBatchSize?: number;
    encoding?: string;
    queueType?: string;
    syncApiVersion?: number;
    deviceId?: string;
    deviceParams?: string;
    queueParams?: string;
    entityFbid?: thrift.Int64;
    syncTokenLong?: thrift.Int64;
}
export interface IGetIrisDiffsArgs {
    syncToken?: string;
    lastSeqId?: number | string | thrift.Int64;
    maxDeltasAbleToProcess?: number;
    deltaBatchSize?: number;
    encoding?: string;
    queueType?: string;
    syncApiVersion?: number;
    deviceId?: string;
    deviceParams?: string;
    queueParams?: string;
    entityFbid?: number | string | thrift.Int64;
    syncTokenLong?: number | string | thrift.Int64;
}
export const GetIrisDiffsCodec: thrift.IStructCodec<IGetIrisDiffsArgs, IGetIrisDiffs> = {
    encode(args: IGetIrisDiffsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            syncToken: args.syncToken,
            lastSeqId: (typeof args.lastSeqId === "number" ? new thrift.Int64(args.lastSeqId) : typeof args.lastSeqId === "string" ? thrift.Int64.fromDecimalString(args.lastSeqId) : args.lastSeqId),
            maxDeltasAbleToProcess: args.maxDeltasAbleToProcess,
            deltaBatchSize: args.deltaBatchSize,
            encoding: args.encoding,
            queueType: args.queueType,
            syncApiVersion: args.syncApiVersion,
            deviceId: args.deviceId,
            deviceParams: args.deviceParams,
            queueParams: args.queueParams,
            entityFbid: (typeof args.entityFbid === "number" ? new thrift.Int64(args.entityFbid) : typeof args.entityFbid === "string" ? thrift.Int64.fromDecimalString(args.entityFbid) : args.entityFbid),
            syncTokenLong: (typeof args.syncTokenLong === "number" ? new thrift.Int64(args.syncTokenLong) : typeof args.syncTokenLong === "string" ? thrift.Int64.fromDecimalString(args.syncTokenLong) : args.syncTokenLong)
        };
        output.writeStructBegin("GetIrisDiffs");
        if (obj.syncToken != null) {
            output.writeFieldBegin("syncToken", thrift.TType.STRING, 1);
            output.writeString(obj.syncToken);
            output.writeFieldEnd();
        }
        if (obj.lastSeqId != null) {
            output.writeFieldBegin("lastSeqId", thrift.TType.I64, 2);
            output.writeI64((typeof obj.lastSeqId === "number" ? new thrift.Int64(obj.lastSeqId) : typeof obj.lastSeqId === "string" ? thrift.Int64.fromDecimalString(obj.lastSeqId) : obj.lastSeqId));
            output.writeFieldEnd();
        }
        if (obj.maxDeltasAbleToProcess != null) {
            output.writeFieldBegin("maxDeltasAbleToProcess", thrift.TType.I32, 3);
            output.writeI32(obj.maxDeltasAbleToProcess);
            output.writeFieldEnd();
        }
        if (obj.deltaBatchSize != null) {
            output.writeFieldBegin("deltaBatchSize", thrift.TType.I32, 4);
            output.writeI32(obj.deltaBatchSize);
            output.writeFieldEnd();
        }
        if (obj.encoding != null) {
            output.writeFieldBegin("encoding", thrift.TType.STRING, 5);
            output.writeString(obj.encoding);
            output.writeFieldEnd();
        }
        if (obj.queueType != null) {
            output.writeFieldBegin("queueType", thrift.TType.STRING, 6);
            output.writeString(obj.queueType);
            output.writeFieldEnd();
        }
        if (obj.syncApiVersion != null) {
            output.writeFieldBegin("syncApiVersion", thrift.TType.I32, 7);
            output.writeI32(obj.syncApiVersion);
            output.writeFieldEnd();
        }
        if (obj.deviceId != null) {
            output.writeFieldBegin("deviceId", thrift.TType.STRING, 8);
            output.writeString(obj.deviceId);
            output.writeFieldEnd();
        }
        if (obj.deviceParams != null) {
            output.writeFieldBegin("deviceParams", thrift.TType.STRING, 9);
            output.writeString(obj.deviceParams);
            output.writeFieldEnd();
        }
        if (obj.queueParams != null) {
            output.writeFieldBegin("queueParams", thrift.TType.STRING, 10);
            output.writeString(obj.queueParams);
            output.writeFieldEnd();
        }
        if (obj.entityFbid != null) {
            output.writeFieldBegin("entityFbid", thrift.TType.I64, 11);
            output.writeI64((typeof obj.entityFbid === "number" ? new thrift.Int64(obj.entityFbid) : typeof obj.entityFbid === "string" ? thrift.Int64.fromDecimalString(obj.entityFbid) : obj.entityFbid));
            output.writeFieldEnd();
        }
        if (obj.syncTokenLong != null) {
            output.writeFieldBegin("syncTokenLong", thrift.TType.I64, 12);
            output.writeI64((typeof obj.syncTokenLong === "number" ? new thrift.Int64(obj.syncTokenLong) : typeof obj.syncTokenLong === "string" ? thrift.Int64.fromDecimalString(obj.syncTokenLong) : obj.syncTokenLong));
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IGetIrisDiffs {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.syncToken = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_2: thrift.Int64 = input.readI64();
                        _args.lastSeqId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: number = input.readI32();
                        _args.maxDeltasAbleToProcess = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: number = input.readI32();
                        _args.deltaBatchSize = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.encoding = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.queueType = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.syncApiVersion = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.deviceId = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.deviceParams = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.queueParams = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.I64) {
                        const value_11: thrift.Int64 = input.readI64();
                        _args.entityFbid = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.I64) {
                        const value_12: thrift.Int64 = input.readI64();
                        _args.syncTokenLong = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            syncToken: _args.syncToken,
            lastSeqId: _args.lastSeqId,
            maxDeltasAbleToProcess: _args.maxDeltasAbleToProcess,
            deltaBatchSize: _args.deltaBatchSize,
            encoding: _args.encoding,
            queueType: _args.queueType,
            syncApiVersion: _args.syncApiVersion,
            deviceId: _args.deviceId,
            deviceParams: _args.deviceParams,
            queueParams: _args.queueParams,
            entityFbid: _args.entityFbid,
            syncTokenLong: _args.syncTokenLong
        };
    }
};
export class GetIrisDiffs extends thrift.StructLike implements IGetIrisDiffs {
    public syncToken?: string;
    public lastSeqId?: thrift.Int64;
    public maxDeltasAbleToProcess?: number;
    public deltaBatchSize?: number;
    public encoding?: string;
    public queueType?: string;
    public syncApiVersion?: number;
    public deviceId?: string;
    public deviceParams?: string;
    public queueParams?: string;
    public entityFbid?: thrift.Int64;
    public syncTokenLong?: thrift.Int64;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IGetIrisDiffsArgs = {}) {
        super();
        if (args.syncToken != null) {
            const value_13: string = args.syncToken;
            this.syncToken = value_13;
        }
        if (args.lastSeqId != null) {
            const value_14: thrift.Int64 = (typeof args.lastSeqId === "number" ? new thrift.Int64(args.lastSeqId) : typeof args.lastSeqId === "string" ? thrift.Int64.fromDecimalString(args.lastSeqId) : args.lastSeqId);
            this.lastSeqId = value_14;
        }
        if (args.maxDeltasAbleToProcess != null) {
            const value_15: number = args.maxDeltasAbleToProcess;
            this.maxDeltasAbleToProcess = value_15;
        }
        if (args.deltaBatchSize != null) {
            const value_16: number = args.deltaBatchSize;
            this.deltaBatchSize = value_16;
        }
        if (args.encoding != null) {
            const value_17: string = args.encoding;
            this.encoding = value_17;
        }
        if (args.queueType != null) {
            const value_18: string = args.queueType;
            this.queueType = value_18;
        }
        if (args.syncApiVersion != null) {
            const value_19: number = args.syncApiVersion;
            this.syncApiVersion = value_19;
        }
        if (args.deviceId != null) {
            const value_20: string = args.deviceId;
            this.deviceId = value_20;
        }
        if (args.deviceParams != null) {
            const value_21: string = args.deviceParams;
            this.deviceParams = value_21;
        }
        if (args.queueParams != null) {
            const value_22: string = args.queueParams;
            this.queueParams = value_22;
        }
        if (args.entityFbid != null) {
            const value_23: thrift.Int64 = (typeof args.entityFbid === "number" ? new thrift.Int64(args.entityFbid) : typeof args.entityFbid === "string" ? thrift.Int64.fromDecimalString(args.entityFbid) : args.entityFbid);
            this.entityFbid = value_23;
        }
        if (args.syncTokenLong != null) {
            const value_24: thrift.Int64 = (typeof args.syncTokenLong === "number" ? new thrift.Int64(args.syncTokenLong) : typeof args.syncTokenLong === "string" ? thrift.Int64.fromDecimalString(args.syncTokenLong) : args.syncTokenLong);
            this.syncTokenLong = value_24;
        }
    }
    public static read(input: thrift.TProtocol): GetIrisDiffs {
        return new GetIrisDiffs(GetIrisDiffsCodec.decode(input));
    }
    public static write(args: IGetIrisDiffsArgs, output: thrift.TProtocol): void {
        return GetIrisDiffsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return GetIrisDiffsCodec.encode(this, output);
    }
}
