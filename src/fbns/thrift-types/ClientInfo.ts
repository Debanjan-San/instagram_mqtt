/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IClientInfo {
    userId?: thrift.Int64;
    userAgent?: string;
    clientCapabilities?: thrift.Int64;
    endpointCapabilities?: thrift.Int64;
    publishFormat?: number;
    noAutomaticForeground?: boolean;
    makeUserAvailableInForeground?: boolean;
    deviceId?: string;
    isInitiallyForeground?: boolean;
    networkType?: number;
    networkSubtype?: number;
    clientMqttSessionId?: thrift.Int64;
    clientIpAddress?: string;
    subscribeTopics?: Array<number>;
    clientType?: string;
    appId?: thrift.Int64;
    overrideNectarLogging?: boolean;
    connectTokenHash?: string;
    regionPreference?: string;
    deviceSecret?: string;
    clientStack?: number;
    fbnsConnectionKey?: thrift.Int64;
    fbnsConnectionSecret?: string;
    fbnsDeviceId?: string;
    fbnsDeviceSecret?: string;
}
export interface IClientInfoArgs {
    userId?: number | string | thrift.Int64;
    userAgent?: string;
    clientCapabilities?: number | string | thrift.Int64;
    endpointCapabilities?: number | string | thrift.Int64;
    publishFormat?: number;
    noAutomaticForeground?: boolean;
    makeUserAvailableInForeground?: boolean;
    deviceId?: string;
    isInitiallyForeground?: boolean;
    networkType?: number;
    networkSubtype?: number;
    clientMqttSessionId?: number | string | thrift.Int64;
    clientIpAddress?: string;
    subscribeTopics?: Array<number>;
    clientType?: string;
    appId?: number | string | thrift.Int64;
    overrideNectarLogging?: boolean;
    connectTokenHash?: string;
    regionPreference?: string;
    deviceSecret?: string;
    clientStack?: number;
    fbnsConnectionKey?: number | string | thrift.Int64;
    fbnsConnectionSecret?: string;
    fbnsDeviceId?: string;
    fbnsDeviceSecret?: string;
}
export const ClientInfoCodec: thrift.IStructCodec<IClientInfoArgs, IClientInfo> = {
    encode(args: IClientInfoArgs, output: thrift.TProtocol): void {
        const obj: any = {
            userId: (typeof args.userId === "number" ? new thrift.Int64(args.userId) : typeof args.userId === "string" ? thrift.Int64.fromDecimalString(args.userId) : args.userId),
            userAgent: args.userAgent,
            clientCapabilities: (typeof args.clientCapabilities === "number" ? new thrift.Int64(args.clientCapabilities) : typeof args.clientCapabilities === "string" ? thrift.Int64.fromDecimalString(args.clientCapabilities) : args.clientCapabilities),
            endpointCapabilities: (typeof args.endpointCapabilities === "number" ? new thrift.Int64(args.endpointCapabilities) : typeof args.endpointCapabilities === "string" ? thrift.Int64.fromDecimalString(args.endpointCapabilities) : args.endpointCapabilities),
            publishFormat: args.publishFormat,
            noAutomaticForeground: args.noAutomaticForeground,
            makeUserAvailableInForeground: args.makeUserAvailableInForeground,
            deviceId: args.deviceId,
            isInitiallyForeground: args.isInitiallyForeground,
            networkType: args.networkType,
            networkSubtype: args.networkSubtype,
            clientMqttSessionId: (typeof args.clientMqttSessionId === "number" ? new thrift.Int64(args.clientMqttSessionId) : typeof args.clientMqttSessionId === "string" ? thrift.Int64.fromDecimalString(args.clientMqttSessionId) : args.clientMqttSessionId),
            clientIpAddress: args.clientIpAddress,
            subscribeTopics: args.subscribeTopics,
            clientType: args.clientType,
            appId: (typeof args.appId === "number" ? new thrift.Int64(args.appId) : typeof args.appId === "string" ? thrift.Int64.fromDecimalString(args.appId) : args.appId),
            overrideNectarLogging: args.overrideNectarLogging,
            connectTokenHash: args.connectTokenHash,
            regionPreference: args.regionPreference,
            deviceSecret: args.deviceSecret,
            clientStack: args.clientStack,
            fbnsConnectionKey: (typeof args.fbnsConnectionKey === "number" ? new thrift.Int64(args.fbnsConnectionKey) : typeof args.fbnsConnectionKey === "string" ? thrift.Int64.fromDecimalString(args.fbnsConnectionKey) : args.fbnsConnectionKey),
            fbnsConnectionSecret: args.fbnsConnectionSecret,
            fbnsDeviceId: args.fbnsDeviceId,
            fbnsDeviceSecret: args.fbnsDeviceSecret
        };
        output.writeStructBegin("ClientInfo");
        if (obj.userId != null) {
            output.writeFieldBegin("userId", thrift.TType.I64, 1);
            output.writeI64((typeof obj.userId === "number" ? new thrift.Int64(obj.userId) : typeof obj.userId === "string" ? thrift.Int64.fromDecimalString(obj.userId) : obj.userId));
            output.writeFieldEnd();
        }
        if (obj.userAgent != null) {
            output.writeFieldBegin("userAgent", thrift.TType.STRING, 2);
            output.writeString(obj.userAgent);
            output.writeFieldEnd();
        }
        if (obj.clientCapabilities != null) {
            output.writeFieldBegin("clientCapabilities", thrift.TType.I64, 3);
            output.writeI64((typeof obj.clientCapabilities === "number" ? new thrift.Int64(obj.clientCapabilities) : typeof obj.clientCapabilities === "string" ? thrift.Int64.fromDecimalString(obj.clientCapabilities) : obj.clientCapabilities));
            output.writeFieldEnd();
        }
        if (obj.endpointCapabilities != null) {
            output.writeFieldBegin("endpointCapabilities", thrift.TType.I64, 4);
            output.writeI64((typeof obj.endpointCapabilities === "number" ? new thrift.Int64(obj.endpointCapabilities) : typeof obj.endpointCapabilities === "string" ? thrift.Int64.fromDecimalString(obj.endpointCapabilities) : obj.endpointCapabilities));
            output.writeFieldEnd();
        }
        if (obj.publishFormat != null) {
            output.writeFieldBegin("publishFormat", thrift.TType.I32, 5);
            output.writeI32(obj.publishFormat);
            output.writeFieldEnd();
        }
        if (obj.noAutomaticForeground != null) {
            output.writeFieldBegin("noAutomaticForeground", thrift.TType.BOOL, 6);
            output.writeBool(obj.noAutomaticForeground);
            output.writeFieldEnd();
        }
        if (obj.makeUserAvailableInForeground != null) {
            output.writeFieldBegin("makeUserAvailableInForeground", thrift.TType.BOOL, 7);
            output.writeBool(obj.makeUserAvailableInForeground);
            output.writeFieldEnd();
        }
        if (obj.deviceId != null) {
            output.writeFieldBegin("deviceId", thrift.TType.STRING, 8);
            output.writeString(obj.deviceId);
            output.writeFieldEnd();
        }
        if (obj.isInitiallyForeground != null) {
            output.writeFieldBegin("isInitiallyForeground", thrift.TType.BOOL, 9);
            output.writeBool(obj.isInitiallyForeground);
            output.writeFieldEnd();
        }
        if (obj.networkType != null) {
            output.writeFieldBegin("networkType", thrift.TType.I32, 10);
            output.writeI32(obj.networkType);
            output.writeFieldEnd();
        }
        if (obj.networkSubtype != null) {
            output.writeFieldBegin("networkSubtype", thrift.TType.I32, 11);
            output.writeI32(obj.networkSubtype);
            output.writeFieldEnd();
        }
        if (obj.clientMqttSessionId != null) {
            output.writeFieldBegin("clientMqttSessionId", thrift.TType.I64, 12);
            output.writeI64((typeof obj.clientMqttSessionId === "number" ? new thrift.Int64(obj.clientMqttSessionId) : typeof obj.clientMqttSessionId === "string" ? thrift.Int64.fromDecimalString(obj.clientMqttSessionId) : obj.clientMqttSessionId));
            output.writeFieldEnd();
        }
        if (obj.clientIpAddress != null) {
            output.writeFieldBegin("clientIpAddress", thrift.TType.STRING, 13);
            output.writeString(obj.clientIpAddress);
            output.writeFieldEnd();
        }
        if (obj.subscribeTopics != null) {
            output.writeFieldBegin("subscribeTopics", thrift.TType.LIST, 14);
            output.writeListBegin(thrift.TType.I32, obj.subscribeTopics.length);
            obj.subscribeTopics.forEach((value_1: number): void => {
                output.writeI32(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.clientType != null) {
            output.writeFieldBegin("clientType", thrift.TType.STRING, 15);
            output.writeString(obj.clientType);
            output.writeFieldEnd();
        }
        if (obj.appId != null) {
            output.writeFieldBegin("appId", thrift.TType.I64, 16);
            output.writeI64((typeof obj.appId === "number" ? new thrift.Int64(obj.appId) : typeof obj.appId === "string" ? thrift.Int64.fromDecimalString(obj.appId) : obj.appId));
            output.writeFieldEnd();
        }
        if (obj.overrideNectarLogging != null) {
            output.writeFieldBegin("overrideNectarLogging", thrift.TType.BOOL, 17);
            output.writeBool(obj.overrideNectarLogging);
            output.writeFieldEnd();
        }
        if (obj.connectTokenHash != null) {
            output.writeFieldBegin("connectTokenHash", thrift.TType.STRING, 18);
            output.writeString(obj.connectTokenHash);
            output.writeFieldEnd();
        }
        if (obj.regionPreference != null) {
            output.writeFieldBegin("regionPreference", thrift.TType.STRING, 19);
            output.writeString(obj.regionPreference);
            output.writeFieldEnd();
        }
        if (obj.deviceSecret != null) {
            output.writeFieldBegin("deviceSecret", thrift.TType.STRING, 20);
            output.writeString(obj.deviceSecret);
            output.writeFieldEnd();
        }
        if (obj.clientStack != null) {
            output.writeFieldBegin("clientStack", thrift.TType.BYTE, 21);
            output.writeByte(obj.clientStack);
            output.writeFieldEnd();
        }
        if (obj.fbnsConnectionKey != null) {
            output.writeFieldBegin("fbnsConnectionKey", thrift.TType.I64, 22);
            output.writeI64((typeof obj.fbnsConnectionKey === "number" ? new thrift.Int64(obj.fbnsConnectionKey) : typeof obj.fbnsConnectionKey === "string" ? thrift.Int64.fromDecimalString(obj.fbnsConnectionKey) : obj.fbnsConnectionKey));
            output.writeFieldEnd();
        }
        if (obj.fbnsConnectionSecret != null) {
            output.writeFieldBegin("fbnsConnectionSecret", thrift.TType.STRING, 23);
            output.writeString(obj.fbnsConnectionSecret);
            output.writeFieldEnd();
        }
        if (obj.fbnsDeviceId != null) {
            output.writeFieldBegin("fbnsDeviceId", thrift.TType.STRING, 24);
            output.writeString(obj.fbnsDeviceId);
            output.writeFieldEnd();
        }
        if (obj.fbnsDeviceSecret != null) {
            output.writeFieldBegin("fbnsDeviceSecret", thrift.TType.STRING, 25);
            output.writeString(obj.fbnsDeviceSecret);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IClientInfo {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_2: thrift.Int64 = input.readI64();
                        _args.userId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.userAgent = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I64) {
                        const value_4: thrift.Int64 = input.readI64();
                        _args.clientCapabilities = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I64) {
                        const value_5: thrift.Int64 = input.readI64();
                        _args.endpointCapabilities = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I32) {
                        const value_6: number = input.readI32();
                        _args.publishFormat = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.noAutomaticForeground = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.makeUserAvailableInForeground = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.deviceId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.isInitiallyForeground = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.networkType = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.I32) {
                        const value_12: number = input.readI32();
                        _args.networkSubtype = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.I64) {
                        const value_13: thrift.Int64 = input.readI64();
                        _args.clientMqttSessionId = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.clientIpAddress = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.LIST) {
                        const value_15: Array<number> = new Array<number>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_16: number = input.readI32();
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.subscribeTopics = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRING) {
                        const value_17: string = input.readString();
                        _args.clientType = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.I64) {
                        const value_18: thrift.Int64 = input.readI64();
                        _args.appId = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_19: boolean = input.readBool();
                        _args.overrideNectarLogging = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.STRING) {
                        const value_20: string = input.readString();
                        _args.connectTokenHash = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.STRING) {
                        const value_21: string = input.readString();
                        _args.regionPreference = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.STRING) {
                        const value_22: string = input.readString();
                        _args.deviceSecret = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.BYTE) {
                        const value_23: number = input.readByte();
                        _args.clientStack = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.I64) {
                        const value_24: thrift.Int64 = input.readI64();
                        _args.fbnsConnectionKey = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.STRING) {
                        const value_25: string = input.readString();
                        _args.fbnsConnectionSecret = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.STRING) {
                        const value_26: string = input.readString();
                        _args.fbnsDeviceId = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.STRING) {
                        const value_27: string = input.readString();
                        _args.fbnsDeviceSecret = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            userId: _args.userId,
            userAgent: _args.userAgent,
            clientCapabilities: _args.clientCapabilities,
            endpointCapabilities: _args.endpointCapabilities,
            publishFormat: _args.publishFormat,
            noAutomaticForeground: _args.noAutomaticForeground,
            makeUserAvailableInForeground: _args.makeUserAvailableInForeground,
            deviceId: _args.deviceId,
            isInitiallyForeground: _args.isInitiallyForeground,
            networkType: _args.networkType,
            networkSubtype: _args.networkSubtype,
            clientMqttSessionId: _args.clientMqttSessionId,
            clientIpAddress: _args.clientIpAddress,
            subscribeTopics: _args.subscribeTopics,
            clientType: _args.clientType,
            appId: _args.appId,
            overrideNectarLogging: _args.overrideNectarLogging,
            connectTokenHash: _args.connectTokenHash,
            regionPreference: _args.regionPreference,
            deviceSecret: _args.deviceSecret,
            clientStack: _args.clientStack,
            fbnsConnectionKey: _args.fbnsConnectionKey,
            fbnsConnectionSecret: _args.fbnsConnectionSecret,
            fbnsDeviceId: _args.fbnsDeviceId,
            fbnsDeviceSecret: _args.fbnsDeviceSecret
        };
    }
};
export class ClientInfo extends thrift.StructLike implements IClientInfo {
    public userId?: thrift.Int64;
    public userAgent?: string;
    public clientCapabilities?: thrift.Int64;
    public endpointCapabilities?: thrift.Int64;
    public publishFormat?: number;
    public noAutomaticForeground?: boolean;
    public makeUserAvailableInForeground?: boolean;
    public deviceId?: string;
    public isInitiallyForeground?: boolean;
    public networkType?: number;
    public networkSubtype?: number;
    public clientMqttSessionId?: thrift.Int64;
    public clientIpAddress?: string;
    public subscribeTopics?: Array<number>;
    public clientType?: string;
    public appId?: thrift.Int64;
    public overrideNectarLogging?: boolean;
    public connectTokenHash?: string;
    public regionPreference?: string;
    public deviceSecret?: string;
    public clientStack?: number;
    public fbnsConnectionKey?: thrift.Int64;
    public fbnsConnectionSecret?: string;
    public fbnsDeviceId?: string;
    public fbnsDeviceSecret?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IClientInfoArgs = {}) {
        super();
        if (args.userId != null) {
            const value_28: thrift.Int64 = (typeof args.userId === "number" ? new thrift.Int64(args.userId) : typeof args.userId === "string" ? thrift.Int64.fromDecimalString(args.userId) : args.userId);
            this.userId = value_28;
        }
        if (args.userAgent != null) {
            const value_29: string = args.userAgent;
            this.userAgent = value_29;
        }
        if (args.clientCapabilities != null) {
            const value_30: thrift.Int64 = (typeof args.clientCapabilities === "number" ? new thrift.Int64(args.clientCapabilities) : typeof args.clientCapabilities === "string" ? thrift.Int64.fromDecimalString(args.clientCapabilities) : args.clientCapabilities);
            this.clientCapabilities = value_30;
        }
        if (args.endpointCapabilities != null) {
            const value_31: thrift.Int64 = (typeof args.endpointCapabilities === "number" ? new thrift.Int64(args.endpointCapabilities) : typeof args.endpointCapabilities === "string" ? thrift.Int64.fromDecimalString(args.endpointCapabilities) : args.endpointCapabilities);
            this.endpointCapabilities = value_31;
        }
        if (args.publishFormat != null) {
            const value_32: number = args.publishFormat;
            this.publishFormat = value_32;
        }
        if (args.noAutomaticForeground != null) {
            const value_33: boolean = args.noAutomaticForeground;
            this.noAutomaticForeground = value_33;
        }
        if (args.makeUserAvailableInForeground != null) {
            const value_34: boolean = args.makeUserAvailableInForeground;
            this.makeUserAvailableInForeground = value_34;
        }
        if (args.deviceId != null) {
            const value_35: string = args.deviceId;
            this.deviceId = value_35;
        }
        if (args.isInitiallyForeground != null) {
            const value_36: boolean = args.isInitiallyForeground;
            this.isInitiallyForeground = value_36;
        }
        if (args.networkType != null) {
            const value_37: number = args.networkType;
            this.networkType = value_37;
        }
        if (args.networkSubtype != null) {
            const value_38: number = args.networkSubtype;
            this.networkSubtype = value_38;
        }
        if (args.clientMqttSessionId != null) {
            const value_39: thrift.Int64 = (typeof args.clientMqttSessionId === "number" ? new thrift.Int64(args.clientMqttSessionId) : typeof args.clientMqttSessionId === "string" ? thrift.Int64.fromDecimalString(args.clientMqttSessionId) : args.clientMqttSessionId);
            this.clientMqttSessionId = value_39;
        }
        if (args.clientIpAddress != null) {
            const value_40: string = args.clientIpAddress;
            this.clientIpAddress = value_40;
        }
        if (args.subscribeTopics != null) {
            const value_41: Array<number> = new Array<number>();
            args.subscribeTopics.forEach((value_53: number): void => {
                const value_54: number = value_53;
                value_41.push(value_54);
            });
            this.subscribeTopics = value_41;
        }
        if (args.clientType != null) {
            const value_42: string = args.clientType;
            this.clientType = value_42;
        }
        if (args.appId != null) {
            const value_43: thrift.Int64 = (typeof args.appId === "number" ? new thrift.Int64(args.appId) : typeof args.appId === "string" ? thrift.Int64.fromDecimalString(args.appId) : args.appId);
            this.appId = value_43;
        }
        if (args.overrideNectarLogging != null) {
            const value_44: boolean = args.overrideNectarLogging;
            this.overrideNectarLogging = value_44;
        }
        if (args.connectTokenHash != null) {
            const value_45: string = args.connectTokenHash;
            this.connectTokenHash = value_45;
        }
        if (args.regionPreference != null) {
            const value_46: string = args.regionPreference;
            this.regionPreference = value_46;
        }
        if (args.deviceSecret != null) {
            const value_47: string = args.deviceSecret;
            this.deviceSecret = value_47;
        }
        if (args.clientStack != null) {
            const value_48: number = args.clientStack;
            this.clientStack = value_48;
        }
        if (args.fbnsConnectionKey != null) {
            const value_49: thrift.Int64 = (typeof args.fbnsConnectionKey === "number" ? new thrift.Int64(args.fbnsConnectionKey) : typeof args.fbnsConnectionKey === "string" ? thrift.Int64.fromDecimalString(args.fbnsConnectionKey) : args.fbnsConnectionKey);
            this.fbnsConnectionKey = value_49;
        }
        if (args.fbnsConnectionSecret != null) {
            const value_50: string = args.fbnsConnectionSecret;
            this.fbnsConnectionSecret = value_50;
        }
        if (args.fbnsDeviceId != null) {
            const value_51: string = args.fbnsDeviceId;
            this.fbnsDeviceId = value_51;
        }
        if (args.fbnsDeviceSecret != null) {
            const value_52: string = args.fbnsDeviceSecret;
            this.fbnsDeviceSecret = value_52;
        }
    }
    public static read(input: thrift.TProtocol): ClientInfo {
        return new ClientInfo(ClientInfoCodec.decode(input));
    }
    public static write(args: IClientInfoArgs, output: thrift.TProtocol): void {
        return ClientInfoCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ClientInfoCodec.encode(this, output);
    }
}
