/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as ClientInfo from "./ClientInfo";
import * as ProxygenInfo from "./ProxygenInfo";
import * as CombinedPublish from "./CombinedPublish";
export interface IConnect {
    clientIdentifier?: string;
    willTopic?: string;
    willMessage?: string;
    clientInfo?: ClientInfo.IClientInfo;
    password?: string;
    getDiffsRequests?: Array<string>;
    proxygenInfo?: Array<ProxygenInfo.IProxygenInfo>;
    combinedPublishes?: Array<CombinedPublish.ICombinedPublish>;
    zeroRatingTokenHash?: string;
    appSpecificInfo?: Map<string, string>;
}
export interface IConnectArgs {
    clientIdentifier?: string;
    willTopic?: string;
    willMessage?: string;
    clientInfo?: ClientInfo.IClientInfoArgs;
    password?: string;
    getDiffsRequests?: Array<string>;
    proxygenInfo?: Array<ProxygenInfo.IProxygenInfoArgs>;
    combinedPublishes?: Array<CombinedPublish.ICombinedPublishArgs>;
    zeroRatingTokenHash?: string;
    appSpecificInfo?: Map<string, string>;
}
export const ConnectCodec: thrift.IStructCodec<IConnectArgs, IConnect> = {
    encode(args: IConnectArgs, output: thrift.TProtocol): void {
        const obj: any = {
            clientIdentifier: args.clientIdentifier,
            willTopic: args.willTopic,
            willMessage: args.willMessage,
            clientInfo: args.clientInfo,
            password: args.password,
            getDiffsRequests: args.getDiffsRequests,
            proxygenInfo: args.proxygenInfo,
            combinedPublishes: args.combinedPublishes,
            zeroRatingTokenHash: args.zeroRatingTokenHash,
            appSpecificInfo: args.appSpecificInfo
        };
        output.writeStructBegin("Connect");
        if (obj.clientIdentifier != null) {
            output.writeFieldBegin("clientIdentifier", thrift.TType.STRING, 1);
            output.writeString(obj.clientIdentifier);
            output.writeFieldEnd();
        }
        if (obj.willTopic != null) {
            output.writeFieldBegin("willTopic", thrift.TType.STRING, 2);
            output.writeString(obj.willTopic);
            output.writeFieldEnd();
        }
        if (obj.willMessage != null) {
            output.writeFieldBegin("willMessage", thrift.TType.STRING, 3);
            output.writeString(obj.willMessage);
            output.writeFieldEnd();
        }
        if (obj.clientInfo != null) {
            output.writeFieldBegin("clientInfo", thrift.TType.STRUCT, 4);
            ClientInfo.ClientInfoCodec.encode(obj.clientInfo, output);
            output.writeFieldEnd();
        }
        if (obj.password != null) {
            output.writeFieldBegin("password", thrift.TType.STRING, 5);
            output.writeString(obj.password);
            output.writeFieldEnd();
        }
        if (obj.getDiffsRequests != null) {
            output.writeFieldBegin("getDiffsRequests", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRING, obj.getDiffsRequests.length);
            obj.getDiffsRequests.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.proxygenInfo != null) {
            output.writeFieldBegin("proxygenInfo", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.STRUCT, obj.proxygenInfo.length);
            obj.proxygenInfo.forEach((value_2: ProxygenInfo.IProxygenInfoArgs): void => {
                ProxygenInfo.ProxygenInfoCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.combinedPublishes != null) {
            output.writeFieldBegin("combinedPublishes", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, obj.combinedPublishes.length);
            obj.combinedPublishes.forEach((value_3: CombinedPublish.ICombinedPublishArgs): void => {
                CombinedPublish.CombinedPublishCodec.encode(value_3, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.zeroRatingTokenHash != null) {
            output.writeFieldBegin("zeroRatingTokenHash", thrift.TType.STRING, 9);
            output.writeString(obj.zeroRatingTokenHash);
            output.writeFieldEnd();
        }
        if (obj.appSpecificInfo != null) {
            output.writeFieldBegin("appSpecificInfo", thrift.TType.MAP, 10);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.appSpecificInfo.size);
            obj.appSpecificInfo.forEach((value_4: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_4);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IConnect {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.clientIdentifier = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.willTopic = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.willMessage = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_8: ClientInfo.IClientInfo = ClientInfo.ClientInfoCodec.decode(input);
                        _args.clientInfo = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.password = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_10: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: string = input.readString();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.getDiffsRequests = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_12: Array<ProxygenInfo.IProxygenInfo> = new Array<ProxygenInfo.IProxygenInfo>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_13: ProxygenInfo.IProxygenInfo = ProxygenInfo.ProxygenInfoCodec.decode(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.proxygenInfo = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_14: Array<CombinedPublish.ICombinedPublish> = new Array<CombinedPublish.ICombinedPublish>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_15: CombinedPublish.ICombinedPublish = CombinedPublish.CombinedPublishCodec.decode(input);
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.combinedPublishes = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_16: string = input.readString();
                        _args.zeroRatingTokenHash = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.MAP) {
                        const value_17: Map<string, string> = new Map<string, string>();
                        const metadata_4: thrift.IThriftMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_2: string = input.readString();
                            const value_18: string = input.readString();
                            value_17.set(key_2, value_18);
                        }
                        input.readMapEnd();
                        _args.appSpecificInfo = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            clientIdentifier: _args.clientIdentifier,
            willTopic: _args.willTopic,
            willMessage: _args.willMessage,
            clientInfo: _args.clientInfo,
            password: _args.password,
            getDiffsRequests: _args.getDiffsRequests,
            proxygenInfo: _args.proxygenInfo,
            combinedPublishes: _args.combinedPublishes,
            zeroRatingTokenHash: _args.zeroRatingTokenHash,
            appSpecificInfo: _args.appSpecificInfo
        };
    }
};
export class Connect extends thrift.StructLike implements IConnect {
    public clientIdentifier?: string;
    public willTopic?: string;
    public willMessage?: string;
    public clientInfo?: ClientInfo.IClientInfo;
    public password?: string;
    public getDiffsRequests?: Array<string>;
    public proxygenInfo?: Array<ProxygenInfo.IProxygenInfo>;
    public combinedPublishes?: Array<CombinedPublish.ICombinedPublish>;
    public zeroRatingTokenHash?: string;
    public appSpecificInfo?: Map<string, string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IConnectArgs = {}) {
        super();
        if (args.clientIdentifier != null) {
            const value_19: string = args.clientIdentifier;
            this.clientIdentifier = value_19;
        }
        if (args.willTopic != null) {
            const value_20: string = args.willTopic;
            this.willTopic = value_20;
        }
        if (args.willMessage != null) {
            const value_21: string = args.willMessage;
            this.willMessage = value_21;
        }
        if (args.clientInfo != null) {
            const value_22: ClientInfo.IClientInfo = new ClientInfo.ClientInfo(args.clientInfo);
            this.clientInfo = value_22;
        }
        if (args.password != null) {
            const value_23: string = args.password;
            this.password = value_23;
        }
        if (args.getDiffsRequests != null) {
            const value_24: Array<string> = new Array<string>();
            args.getDiffsRequests.forEach((value_29: string): void => {
                const value_30: string = value_29;
                value_24.push(value_30);
            });
            this.getDiffsRequests = value_24;
        }
        if (args.proxygenInfo != null) {
            const value_25: Array<ProxygenInfo.IProxygenInfo> = new Array<ProxygenInfo.IProxygenInfo>();
            args.proxygenInfo.forEach((value_31: ProxygenInfo.IProxygenInfoArgs): void => {
                const value_32: ProxygenInfo.IProxygenInfo = new ProxygenInfo.ProxygenInfo(value_31);
                value_25.push(value_32);
            });
            this.proxygenInfo = value_25;
        }
        if (args.combinedPublishes != null) {
            const value_26: Array<CombinedPublish.ICombinedPublish> = new Array<CombinedPublish.ICombinedPublish>();
            args.combinedPublishes.forEach((value_33: CombinedPublish.ICombinedPublishArgs): void => {
                const value_34: CombinedPublish.ICombinedPublish = new CombinedPublish.CombinedPublish(value_33);
                value_26.push(value_34);
            });
            this.combinedPublishes = value_26;
        }
        if (args.zeroRatingTokenHash != null) {
            const value_27: string = args.zeroRatingTokenHash;
            this.zeroRatingTokenHash = value_27;
        }
        if (args.appSpecificInfo != null) {
            const value_28: Map<string, string> = new Map<string, string>();
            args.appSpecificInfo.forEach((value_35: string, key_3: string): void => {
                const value_36: string = value_35;
                const key_4: string = key_3;
                value_28.set(key_4, value_36);
            });
            this.appSpecificInfo = value_28;
        }
    }
    public static read(input: thrift.TProtocol): Connect {
        return new Connect(ConnectCodec.decode(input));
    }
    public static write(args: IConnectArgs, output: thrift.TProtocol): void {
        return ConnectCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ConnectCodec.encode(this, output);
    }
}
